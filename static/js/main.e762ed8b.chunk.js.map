{"version":3,"sources":["../../src/index.tsx","App.tsx","index.tsx"],"names":["PinInput","length","direction","showValues","onChangePin","PinComponent","pinComponent","PinComponentOnFill","pinComponentOnFill","PinComponentOnFocus","pinComponentOnFocus","PinText","pinText","inputRef","useRef","useState","pinValues","setPinValues","isFocused","setIsFocused","focusInput","useCallback","whichToRender","React","handleOnChange","onFocus","onBlur","role","tabIndex","onClick","onKeyDown","style","display","flexDirection","cursor","width","ref","onChange","e","maxLength","position","opacity","height","outline","border","Array","pin","textAlign","marginRight","background","pinOnFocus","pinOnFilled","children","color","fontSize","fontWeight","App","value","console","log","ReactDOM","render","document","getElementById"],"mappings":"kQAaaA,EAAoC,SAAC,G,IAChDC,WACAC,cACAC,eACAC,gBACcC,IAAdC,aACoBC,IAApBC,mBACqBC,IAArBC,oBACSC,IAATC,QAEMC,EAAWC,iBAAjB,M,EAEkCC,mBAAS,IAApCC,OAAWC,O,EAEgBF,oBAAS,GAApCG,OAAWC,OAEZC,EAAaC,uBAAY,W,MAC7B,UAAAR,EAAA,kCADF,IAIMS,EAAgBD,uBACpB,YACE,OAAIL,MAAJ,EAEIO,yBACGpB,MAAyBoB,yBAAUP,EAFxC,KAMEA,iBAAJ,GAGIA,iBAAJ,EAFSO,oBAAP,MAKEP,MAAJ,EAEIO,yBACGpB,MAAyBoB,yBAAUP,EAFxC,KAMKO,oBAAP,QAEF,CAAC,EAAD,YAxBF,IAoCMC,EAAiBH,uBACrB,YACE,GACEjB,KAGFa,OAEF,CARF,IAWMQ,EAAUJ,uBAAY,WAC1BF,GAAa,0BADf,IAIMO,EAASL,uBAAY,WACzBF,GAAa,0BADf,IAIA,OACE,yBACEQ,KAAK,SACLC,SAAU,EACVC,QAAST,EACTU,UAAWV,EACXW,MAAO,CACLC,QADK,OAELC,cAFK,EAGLC,OAHK,OAILC,MAAO,gBAGT,2BACEC,IAAKvB,EACLwB,SAAU,mBAAOb,EAAec,SAAtB,QACVC,UAAWtC,EACX8B,MAAO,CACLS,SADK,WAELC,QAFK,EAGLN,MAHK,EAILO,OAJK,EAKLC,QALK,OAMLC,OAAQ,GAEVnB,QAASA,EACTC,OAAQA,IAETmB,MAAA,iBAEM,qBAAcvB,EAAd,QCjHPwB,G,KAAM,kBACV,yBAAKf,MAAO,CACVgB,UAAW,SACXZ,MAAO,GACPO,OAAQ,GACRM,YAAa,GACbC,WAAY,WAKVC,EAAa,kBACjB,yBAAKnB,MAAO,CACVgB,UAAW,SACXZ,MAAO,GACPO,OAAQ,GACRM,YAAa,GACbC,WAAY,WAKVE,EAAwB,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OAC5B,yBAAKrB,MAAO,CACVgB,UAAW,SACXZ,MAAO,GACPO,OAAQ,GACRM,YAAa,GACbC,WAAY,UAGXG,IAKCzC,EAAoB,SAAC,GAAD,IAAGyC,EAAH,EAAGA,SAAH,OACxB,uBAAGrB,MAAO,CACRsB,MAAO,QACPC,SAAU,OACVC,WAAY,MAGXH,IAsBUI,EAfH,WACV,OACA,kBAAC,EAAD,CACEvD,OAAQ,EACRG,YAAa,SAACqD,GAAD,OAAWC,QAAQC,IAAIF,IACpCtD,YAAU,EACVS,QAASD,EACTL,aAAcwC,EACdtC,mBAAoB2C,EACpBzC,oBAAqBwC,EACrBhD,UAAU,SC3Dd0D,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.e762ed8b.chunk.js","sourcesContent":["import React, { useCallback, useRef, useState } from 'react'\n\ninterface PinInputProps {\n  length: number\n  direction: 'column' | 'row'\n  pinComponent: React.FC\n  pinComponentOnFocus?: React.FC\n  pinComponentOnFill?: React.FC\n  pinText?: React.FC\n  onChangePin?: (values: string) => void\n  showValues?: boolean\n}\n\nexport const PinInput: React.FC<PinInputProps> = ({\n  length,\n  direction,\n  showValues,\n  onChangePin,\n  pinComponent: PinComponent,\n  pinComponentOnFill: PinComponentOnFill,\n  pinComponentOnFocus: PinComponentOnFocus,\n  pinText: PinText\n}) => {\n  const inputRef = useRef<HTMLInputElement>(null)\n\n  const [pinValues, setPinValues] = useState('')\n\n  const [isFocused, setIsFocused] = useState(false)\n\n  const focusInput = useCallback(() => {\n    inputRef.current?.focus()\n  }, [])\n\n  const whichToRender = useCallback(\n    (index: number): React.ReactElement => {\n      if (pinValues[index] && PinComponentOnFill) {\n        return (\n          <PinComponentOnFill>\n            {showValues && PinText && <PinText>{pinValues[index]}</PinText>}\n          </PinComponentOnFill>\n        )\n      }\n      if (pinValues.length === index && PinComponentOnFocus && isFocused) {\n        return <PinComponentOnFocus />\n      }\n      if (pinValues.length === length && PinComponentOnFocus && isFocused) {\n        return <PinComponentOnFocus />\n      }\n      if (pinValues[index] && PinComponentOnFill) {\n        return (\n          <PinComponentOnFill>\n            {showValues && PinText && <PinText>{pinValues[index]}</PinText>}\n          </PinComponentOnFill>\n        )\n      }\n      return <PinComponent />\n    },\n    [\n      PinComponent,\n      PinComponentOnFill,\n      PinComponentOnFocus,\n      pinValues,\n      isFocused,\n      showValues,\n      PinText,\n      length\n    ]\n  )\n\n  const handleOnChange = useCallback(\n    (value: string) => {\n      if (onChangePin) {\n        onChangePin(value)\n      }\n\n      setPinValues(value)\n    },\n    [onChangePin]\n  )\n\n  const onFocus = useCallback(() => {\n    setIsFocused((oldProps) => !oldProps)\n  }, [])\n\n  const onBlur = useCallback(() => {\n    setIsFocused((oldProps) => !oldProps)\n  }, [])\n\n  return (\n    <div\n      role='button'\n      tabIndex={0}\n      onClick={focusInput}\n      onKeyDown={focusInput}\n      style={{\n        display: 'flex',\n        flexDirection: direction,\n        cursor: 'text',\n        width: 'fit-content'\n      }}\n    >\n      <input\n        ref={inputRef}\n        onChange={(e) => handleOnChange(e.target.value)}\n        maxLength={length}\n        style={{\n          position: 'absolute',\n          opacity: 0,\n          width: 0,\n          height: 0,\n          outline: 'none',\n          border: 0\n        }}\n        onFocus={onFocus}\n        onBlur={onBlur}\n      />\n      {Array(length)\n        .fill('')\n        .map((_, index) => whichToRender(index))}\n    </div>\n  )\n}\n","import React from 'react'\n\nimport { PinInput } from 'pin-input-react'\nimport 'pin-input-react/dist/index.css'\n\nconst pin = () => (\n  <div style={{\n    textAlign: 'center',\n    width: 60,\n    height: 60,\n    marginRight: 15,\n    background: 'red',\n  }}\n  />\n);\n\nconst pinOnFocus = () => (\n  <div style={{\n    textAlign: 'center',\n    width: 60,\n    height: 60,\n    marginRight: 15,\n    background: 'blue',\n  }}\n  />\n);\n\nconst pinOnFilled: React.FC = ({ children }) => (\n  <div style={{\n    textAlign: 'center',\n    width: 60,\n    height: 60,\n    marginRight: 15,\n    background: 'green',\n  }}\n  >\n    {children}\n\n  </div>\n);\n\nconst PinText: React.FC = ({ children }) => (\n  <p style={{\n    color: 'black',\n    fontSize: '19px',\n    fontWeight: 800,\n  }}\n  >\n    {children}\n\n  </p>\n\n);\n\n\nconst App = () => {\n  return (\n  <PinInput\n    length={4}\n    onChangePin={(value) => console.log(value)}\n    showValues\n    pinText={PinText}\n    pinComponent={pin}\n    pinComponentOnFill={pinOnFilled}\n    pinComponentOnFocus={pinOnFocus}\n    direction=\"row\"\n  />\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}